name: Build & Deploy

on:
  push:
    branches:
      - prod

permissions:
  contents: write
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Extract Repository Name
        id: extract_repo_name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build JAR
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Upload JAR to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}.jar
          path: build/libs/*.jar

      - name: Extract Project Name & Version
        id: extract_project_info
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          PROJECT_NAME=${{ env.REPO_NAME }}
          VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$PROJECT_NAME" ]; then PROJECT_NAME="default-project"; fi
          if [ -z "$VERSION" ]; then VERSION="1.0.0"; fi
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push Docker Image (Multi-Arch)
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/$REPO_OWNER/$PROJECT_NAME:$VERSION \
            -t ghcr.io/$REPO_OWNER/$PROJECT_NAME:latest \
            --push .

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.HOST }}
          port: ${{ vars.PORT }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd ~/Projects/${{ env.REPO_NAME }}
            docker compose pull
            docker compose up -d